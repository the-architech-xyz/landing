import { useEffect, useRef, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useTranslation } from "@/hooks/useTranslation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Zap, Sparkles, Code, Database, Shield, CreditCard, Palette, Layers } from "lucide-react";
import { SectionHeader } from "@/components/ui/section-header";
import { BRANDING } from "@/lib/branding";
import { useMarketplace } from "@/hooks/useMarketplace";
import { getExampleProjects } from "@/lib/marketplace-utils";

/**
 * THE ARCHITECH CANVAS - "Technical Elegance" Star Moment
 * 
 * Our most polished component with refined animations and interactions.
 * Features the new design system with Electric Cyan and Gold accents.
 */

const ArchitectsCanvas = () => {
  const { t } = useTranslation();
  const containerRef = useRef<HTMLDivElement>(null);
  const { genomes, modules: allModules } = useMarketplace();
  const [userInput, setUserInput] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [selectedModules, setSelectedModules] = useState<any[]>([]); // Store actual module objects, not indices
  const [showBlueprint, setShowBlueprint] = useState(false);
  const [blueprintLines, setBlueprintLines] = useState<string[]>([]);
  const [showProjectStructure, setShowProjectStructure] = useState(false);
  const [showWorkingPreview, setShowWorkingPreview] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [activeTab, setActiveTab] = useState<'technologies' | 'blueprint' | 'structure' | 'preview'>('technologies');
  const [matchedGenome, setMatchedGenome] = useState<any>(null);
  
  // Get real example projects and featured modules from genomes
  const exampleProjects = getExampleProjects(genomes);
  
  // Map real marketplace modules to techStack format
  const iconMap: Record<string, any> = {
    'stripe': CreditCard,
    'clerk': Shield,
    'drizzle': Database,
    'next': Layers,
    'tailwind': Palette,
    'resend': Sparkles,
  };
  
  // Use featured modules from marketplace
  const { modules } = useMarketplace();
  const featuredModules = modules.filter(m => m.featured).slice(0, 6);
  
  const techStack = featuredModules.map(module => ({
    name: module.name,
    keywords: module.tags,
    icon: iconMap[module.id.split('-')[0]] || Code,
    color: "from-cyan-500 to-cyan-600",
    description: module.description
  }));

  // Mobile detection
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // Match user input to best genome
  const findBestGenome = (input: string) => {
    const lowerInput = input.toLowerCase();
    
    return genomes.find(genome => {
      const matchesDescription = genome.description.toLowerCase().includes(lowerInput) ||
                                 lowerInput.includes(genome.name.toLowerCase());
      const matchesTags = genome.tags?.some(tag => lowerInput.includes(tag.toLowerCase()));
      const matchesUseCase = genome.useCase.toLowerCase().includes(lowerInput) ||
                            lowerInput.includes(genome.useCase.toLowerCase());
      
      return matchesDescription || matchesTags || matchesUseCase;
    }) || genomes[0]; // Default to first genome
  };

  // Match user input to best genome and get its modules
  const analyzeInput = (input: string, genome: any) => {
    // Get module IDs from genome
    const genomeModuleIds = [
      ...(genome.genome.adapters || []),
      ...(genome.genome.integrators || []),
      ...(genome.genome.connectors || []),
      ...(genome.genome.features || [])
    ];
    
    // Find actual module objects from marketplace
    const selectedModuleObjects = genomeModuleIds
      .map(moduleId => 
        allModules.find(m => 
          m.id.includes(moduleId) || 
          m.name.toLowerCase().includes(moduleId.toLowerCase()) ||
          m.id.split('/').pop() === moduleId
        )
      )
      .filter(Boolean); // Remove undefined
    
    // If no modules found, use first 3 featured modules as fallback
    return selectedModuleObjects.length > 0 
      ? selectedModuleObjects 
      : featuredModules.slice(0, 3);
  };

  // Generate blueprint from matched genome
  const generateBlueprint = (input: string, moduleObjects: any[], genome: any) => {
    const projectName = input.split(' ').slice(0, 3).join(' ').replace(/[^a-zA-Z0-9\s]/g, '') || 'Mon Projet';
    
    const { adapters = [], integrators = [], connectors = [], features = [] } = genome.genome;
    
    return [
      "# genome.ts - Generated by The Architech",
      "export const genome = {",
      `  name: "${projectName}",`,
      `  description: "${genome.description}",`,
      "",
      `  adapters: [${adapters.map((a: string) => `"${a}"`).join(", ")}],`,
      integrators.length > 0 ? `  integrators: [${integrators.map((i: string) => `"${i}"`).join(", ")}],` : null,
      connectors?.length > 0 ? `  connectors: [${connectors.map((c: string) => `"${c}"`).join(", ")}],` : null,
      features.length > 0 ? `  features: [${features.map((f: string) => `"${f}"`).join(", ")}]` : null,
      "};",
      "",
      "// Detected modules:",
      ...moduleObjects.map(mod => `//  - ${mod.name}`)
    ].filter(Boolean);
  };

  // Generate project structure
  const generateProjectStructure = () => {
    return [
      { name: "src/", type: "folder", icon: "📁", children: [
        { name: "app/", type: "folder", icon: "📁", children: [
          { name: "api/", type: "folder", icon: "📁" },
          { name: "dashboard/", type: "folder", icon: "📁" },
          { name: "layout.tsx", type: "file", icon: "🏗️" }
        ]},
        { name: "components/", type: "folder", icon: "📁" },
        { name: "lib/", type: "folder", icon: "📁" }
      ]},
      { name: "package.json", type: "file", icon: "📦" },
      { name: "tailwind.config.js", type: "file", icon: "🎨" }
    ];
  };

  // Process user input
  const processInput = async (input: string) => {
    if (!input.trim()) return;
    
    setIsProcessing(true);
    setUserInput(input);
    setSelectedModules([]);
    setShowBlueprint(false);
    setBlueprintLines([]);
    setShowProjectStructure(false);
    setShowWorkingPreview(false);
    
    // Find best matching genome
    const genome = findBestGenome(input);
    setMatchedGenome(genome);
    
    // Analyze input and get actual module objects
    const moduleObjects = analyzeInput(input, genome);
    setSelectedModules(moduleObjects);
    setActiveTab('technologies');
    
    // Generate blueprint from matched genome
    setTimeout(() => {
      const blueprint = generateBlueprint(input, moduleObjects, genome);
      setShowBlueprint(true);
      
      blueprint.forEach((line, index) => {
        setTimeout(() => {
          setBlueprintLines(prev => [...prev, line]);
        }, index * 50);
      });
    }, 800);
    
    // Show project structure
    setTimeout(() => {
      setShowProjectStructure(true);
    }, 1500);
    
    // Show working preview
    setTimeout(() => {
      setShowWorkingPreview(true);
      setIsProcessing(false);
    }, 2000);
  };

  // Render project structure tree
  const renderProjectStructure = (items: any[], level: number = 0): React.ReactNode => {
    return items.map((item, index) => (
      <motion.div
        key={`${item.name}-${index}`}
        initial={{ opacity: 0, x: -10 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ delay: index * 0.05, duration: 0.3 }}
      >
        <div className={`flex items-center gap-2 py-1 ${level > 0 ? 'ml-6' : ''}`}>
          <span className="text-base">{item.icon}</span>
          <span className={`font-geist-mono text-sm ${
            item.type === 'folder' ? 'text-cyan-electric font-semibold' : 'text-subtle'
          }`}>
            {item.name}
          </span>
        </div>
        {item.children && (
          <div>
            {renderProjectStructure(item.children, level + 1)}
          </div>
        )}
      </motion.div>
    ));
  };

  return (
    <section
      ref={containerRef}
      id="interactive-demo"
      className="section-padding bg-background relative overflow-hidden"
    >
      {/* Musical Grid Background */}
      <div className="absolute inset-0 musical-grid opacity-50" />

      <div className={BRANDING.spacing.container}>
        {/* Section Header */}
        <SectionHeader section="interactiveDemo" />

        <div className="max-w-7xl mx-auto">
          <div className="grid lg:grid-cols-2 gap-8 items-start">
            {/* Left: Input Section */}
              <motion.div
              initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
            >
              <div className="glass-card p-8">
                <div className="mb-6">
                  <h3 className="text-2xl font-bold mb-2">
                  {t('interactiveDemo.canvas.input.label')}
                </h3>
                  <p className="text-muted-foreground">
                      {t('interactiveDemo.canvas.input.placeholder')}
                    </p>
                  </div>
                
                  <div className="space-y-6">
                  {/* Input Field */}
                    <div className="relative">
                  <Input
                    value={userInput}
                    onChange={(e) => setUserInput(e.target.value)}
                    placeholder="Ex: Un SaaS avec authentification et paiements Stripe"
                      className="text-base py-6 px-5 bg-background/50 border-2 border-primary/30 focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all"
                    disabled={isProcessing}
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && !isProcessing && userInput.trim()) {
                            processInput(userInput);
                          }
                        }}
                      />
                      {isProcessing && (
                        <div className="absolute right-4 top-1/2 -translate-y-1/2">
                          <motion.div
                            animate={{ rotate: 360 }}
                            transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                          >
                          <Sparkles className="h-5 w-5 text-primary" />
                          </motion.div>
                        </div>
                      )}
                    </div>
                    
                  {/* Example Projects */}
                  <div className="space-y-3">
                    <p className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                      <Sparkles className="h-4 w-4 text-accent" />
                      {t('interactiveDemo.canvas.input.examples')}
                    </p>
                    <div className="space-y-2">
                        {exampleProjects.map((example, index) => (
                        <button
                            key={index}
                          onClick={() => {
                                setUserInput(example);
                                processInput(example);
                              }}
                              disabled={isProcessing}
                          className="w-full text-left rounded-md p-3 bg-card border border-border hover:border-primary/50 transition-colors text-sm disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          {example}
                            </button>
                        ))}
                      </div>
                  </div>
                  
                  {/* Generate Button */}
                  <Button
                    onClick={() => processInput(userInput)}
                    disabled={!userInput.trim() || isProcessing}
                    className="w-full py-6 text-base bg-primary hover:bg-primary/90"
                    size="lg"
                  >
                    {isProcessing ? (
                      <>
                              <motion.div
                                animate={{ rotate: 360 }}
                                transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                              >
                          <Sparkles className="h-5 w-5" />
                              </motion.div>
                              <span>Génération en cours...</span>
                      </>
                    ) : (
                      <>
                        <Zap className="h-5 w-5" />
                              <span>Générer mon architecture</span>
                      </>
                    )}
                  </Button>
                </div>
                </div>
              </motion.div>

            {/* Right: Results Section */}
            <AnimatePresence>
            {(selectedModules.length > 0 || showBlueprint || showProjectStructure || showWorkingPreview) && (
              <motion.div
                  initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: 20 }}
                  transition={{ duration: 0.6 }}
              >
                  <div className="glass-card p-6">
                  {/* Tab Navigation */}
                    <div className="flex flex-wrap gap-2 mb-6 pb-4 border-b border-subtle">
                    {selectedModules.length > 0 && (
                      <button
                        onClick={() => setActiveTab('technologies')}
                          className={`rounded-md px-4 py-2 text-sm font-medium font-inter transition-architech ${
                          activeTab === 'technologies'
                              ? 'bg-primary text-white shadow-lg'
                              : 'text-subtle hover:text-primary hover:bg-surface-higher'
                        }`}
                      >
                          <Layers className="h-4 w-4 inline mr-2" />
{t('interactiveDemo.canvas.tabs.technologies')}
                      </button>
                    )}
                    {showBlueprint && (
                      <button
                        onClick={() => setActiveTab('blueprint')}
                          className={`rounded-md px-4 py-2 text-sm font-medium font-inter transition-architech ${
                          activeTab === 'blueprint'
                              ? 'bg-primary text-white shadow-lg'
                              : 'text-subtle hover:text-primary hover:bg-surface-higher'
                        }`}
                      >
                          <Database className="h-4 w-4 inline mr-2" />
{t('interactiveDemo.canvas.tabs.blueprint')}
                      </button>
                    )}
                    {showProjectStructure && (
                      <button
                        onClick={() => setActiveTab('structure')}
                          className={`rounded-md px-4 py-2 text-sm font-medium font-inter transition-architech ${
                          activeTab === 'structure'
                              ? 'bg-primary text-white shadow-lg'
                              : 'text-subtle hover:text-primary hover:bg-surface-higher'
                        }`}
                      >
                          <Layers className="h-4 w-4 inline mr-2" />
{t('interactiveDemo.canvas.tabs.structure')}
                      </button>
                    )}
                    {showWorkingPreview && (
                      <button
                        onClick={() => setActiveTab('preview')}
                          className={`rounded-md px-4 py-2 text-sm font-medium font-inter transition-architech ${
                          activeTab === 'preview'
                              ? 'bg-primary text-white shadow-lg'
                              : 'text-subtle hover:text-primary hover:bg-surface-higher'
                        }`}
                      >
                          <Zap className="h-4 w-4 inline mr-2" />
{t('interactiveDemo.canvas.tabs.preview')}
                      </button>
                    )}
                  </div>

                  {/* Tab Content */}
                  <div className="min-h-[400px]">
                    {/* Technologies Tab */}
                    {activeTab === 'technologies' && selectedModules.length > 0 && (
                      <motion.div
                          initial={{ opacity: 0, x: 10 }}
                        animate={{ opacity: 1, x: 0 }}
                          transition={{ duration: 0.4 }}
                          className="space-y-4"
                      >
                        {/* Matched Genome Indicator */}
                        {matchedGenome && (
                          <div className="mb-4 p-3 bg-primary/5 border border-primary/20 rounded-md">
                            <p className="text-xs text-muted-foreground mb-1">Matched Genome:</p>
                            <p className="text-sm font-semibold text-primary">{matchedGenome.name}</p>
                          </div>
                        )}
                        
                        <div className="flex items-center gap-3 mb-6">
                            <div className="w-10 h-10 rounded-md bg-primary flex items-center justify-center">
                            <Layers className="h-5 w-5 text-white" />
                          </div>
                          <div>
                              <h3 className="text-lg font-bold">
                              {t('interactiveDemo.canvas.technologies.title')}
                            </h3>
                              <p className="text-sm text-muted-foreground">
                                {selectedModules.length} {selectedModules.length > 1 ? 'technologies' : 'technology'}
                            </p>
                          </div>
                        </div>
                        
                          <div className="grid grid-cols-1 gap-3">
                            {selectedModules.map((module, i) => {
                            // Get icon for module
                            const ModuleIcon = iconMap[module.id.split('/').pop() || ''] || Code;
                            return (
                              <motion.div
                                key={module.id}
                                  initial={{ opacity: 0, x: -10 }}
                                  animate={{ opacity: 1, x: 0 }}
                                  transition={{ duration: 0.3, delay: i * 0.1 }}
                                  className="flex items-center gap-4 rounded-lg p-4 bg-card border border-border hover:border-primary/50 transition-colors group"
                                >
                                  <div className="w-12 h-12 rounded-md bg-primary/10 border border-primary/30 flex items-center justify-center">
                                  <ModuleIcon className="h-6 w-6 text-primary group-hover:scale-110 transition-transform" />
                                </div>
                                <div className="flex-1">
                                    <h4 className="font-bold text-base mb-1 group-hover:text-primary transition-colors">
                                    {module.name}
                                  </h4>
                                    <p className="text-sm text-muted-foreground">
                                    {module.description}
                                  </p>
                                </div>
                                  <Badge variant="default" className="text-xs bg-primary/10 text-primary border-primary/30">
                                    {module.category}
                                  </Badge>
                              </motion.div>
                            );
                          })}
                        </div>
                      </motion.div>
                    )}

                    {/* Blueprint Tab */}
                    {activeTab === 'blueprint' && showBlueprint && (
                      <motion.div
                          initial={{ opacity: 0, x: 10 }}
                        animate={{ opacity: 1, x: 0 }}
                          transition={{ duration: 0.4 }}
                      >
                          <div className="bg-surface-higher p-4 border border-subtle">
                            <div className="flex items-center gap-2 mb-4 pb-3 border-b border-subtle">
                          <div className="flex gap-2">
                                <div className="w-3 h-3 bg-state-error"></div>
                                <div className="w-3 h-3 bg-state-warning"></div>
                                <div className="w-3 h-3 bg-state-success"></div>
                          </div>
                              <span className="text-xs text-subtle font-geist-mono ml-3">architecture.yml</span>
                        </div>
                        
                            <div className="font-geist-mono text-sm max-h-96 overflow-y-auto scrollbar-architech space-y-1">
                          {blueprintLines.map((line, index) => (
                            <motion.div
                              key={index}
                                  initial={{ opacity: 0, x: -10 }}
                              animate={{ opacity: 1, x: 0 }}
                                  transition={{ delay: index * 0.03, duration: 0.3 }}
                                  className="flex items-start"
                            >
                                  <span className="text-muted text-xs w-8 select-none">
                                {String(index + 1).padStart(2, '0')}
                              </span>
                                  <span className="ml-3">
                        {line.startsWith("#") ? (
                                      <span className="text-cyan-electric font-semibold">{line}</span>
                        ) : line.includes(":") ? (
                          <>
                                        <span className="text-cyan-electric font-medium">
                              {line.split(":")[0]}:
                            </span>
                                        <span className="text-gold-accent ml-2">
                                          {line.split(":")[1]}
                            </span>
                          </>
                                    ) : (
                                      <span className="text-body">{line}</span>
                                    )}
                              </span>
                      </motion.div>
                    ))}
                            </div>
                  </div>
                  
                  {/* CLI Command Callout */}
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.5, duration: 0.4 }}
                    className="mt-4 p-4 bg-accent/10 border border-accent/30 rounded-lg"
                  >
                    <p className="text-sm text-muted-foreground mb-2">
                      <span className="text-accent font-bold">Try this genome:</span> Copy the code above and run:
                    </p>
                    <div className="bg-background/50 border border-accent/20 rounded-md p-3 font-mono text-sm text-accent">
                      architech generate --genome={matchedGenome?.id || 'custom'}
                    </div>
                  </motion.div>
                </motion.div>
              )}

                    {/* Structure Tab */}
                    {activeTab === 'structure' && showProjectStructure && (
                <motion.div
                          initial={{ opacity: 0, x: 10 }}
                        animate={{ opacity: 1, x: 0 }}
                          transition={{ duration: 0.4 }}
                      >
                          <div className="bg-surface-higher p-4 border border-subtle">
                            <div className="flex items-center gap-2 mb-4 pb-3 border-b border-subtle">
                          <div className="flex gap-2">
                                <div className="w-3 h-3 bg-state-error"></div>
                                <div className="w-3 h-3 bg-state-warning"></div>
                                <div className="w-3 h-3 bg-state-success"></div>
                          </div>
                              <span className="text-xs text-subtle font-geist-mono ml-3">📁 project-structure</span>
                        </div>
                        
                            <div className="max-h-96 overflow-y-auto scrollbar-architech">
                              {renderProjectStructure(generateProjectStructure())}
                            </div>
                  </div>
                </motion.div>
              )}

                    {/* Preview Tab */}
                    {activeTab === 'preview' && showWorkingPreview && (
                <motion.div
                          initial={{ opacity: 0, x: 10 }}
                        animate={{ opacity: 1, x: 0 }}
                          transition={{ duration: 0.4 }}
                        >
                          <div className="bg-white p-6 shadow-large">
                          <div className="flex items-center justify-between border-b border-gray-200 pb-4 mb-6">
                            <div className="flex items-center gap-3">
                              <div className="flex gap-2">
                                <div className="w-3 h-3 bg-red-500"></div>
                                <div className="w-3 h-3 bg-yellow-500"></div>
                                <div className="w-3 h-3 bg-green-500"></div>
                              </div>
                                <h4 className="font-geist font-bold text-gray-800">Dashboard</h4>
                            </div>
                              <Badge variant="success" className="text-xs">
                                <div className="w-2 h-2 bg-green-500 animate-glow-pulse mr-2"></div>
                                Live
                              </Badge>
                          </div>
                          
                            <div className="space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                {[
                                  { label: "Projets actifs", value: "3", icon: Database, color: "blue" },
                                  { label: "Tâches", value: "12", icon: Sparkles, color: "green" }
                                ].map((stat, i) => (
                              <motion.div 
                                    key={i}
                                    className={`bg-gradient-to-br from-${stat.color}-50 to-${stat.color}-100 p-4 border border-${stat.color}-200`}
                                whileHover={{ scale: 1.02 }}
                                  >
                                    <div className="flex items-center gap-2 mb-2">
                                      <div className={`w-8 h-8 bg-${stat.color}-500 flex items-center justify-center`}>
                                        <stat.icon className="h-4 w-4 text-white" />
                                  </div>
                                      <span className={`text-sm text-${stat.color}-600 font-semibold`}>
                                        {stat.label}
                                      </span>
                                  </div>
                                    <div className={`text-3xl font-bold text-${stat.color}-800`}>
                                      {stat.value}
                                </div>
                              </motion.div>
                                ))}
                              </div>
                            </div>
                          </div>
                    </motion.div>
                    )}
                  </div>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ArchitectsCanvas;
